<?xml version="1.0" encoding="UTF-8"?>

<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Bitlocker Encrypt Secondary Volume - Windows</Title>
		<Description><![CDATA[<P>This fixlet will encrypt the specified drive of a device.</P>
<P>The recovery password generated by action 1 is available via the <STRONG>Analysis: Bitlocker - Recovery Password - Windows</STRONG></P>
<P>Information on using this content is available here: <A href="https://github.com/strawgate/C3-Protect/wiki/Bitlocker">https://github.com/strawgate/C3-Protect/wiki/Bitlocker</A></P>]]></Description>
		<Relevance>windows of operating system</Relevance>
		<Relevance><![CDATA[(windows of operating system) AND (version of operating system >= "6.0") AND (( exists product info string whose(it ends with "Enterprise" OR it starts with "Enterprise" OR it ends with "Ultimate" OR it ends with "Server Datacenter") of operating system ) OR ( (version of operating system >= "6.2") AND (exists product info string whose(it ends with "Business") of operating system) )) /* Correct version of Windows */]]></Relevance>
		<Relevance>(boolean value of selects "IsActivated_InitialValue from Win32_Tpm" of wmis "root\CIMv2\Security\MicrosoftTpm") and (boolean value of selects "IsEnabled_InitialValue from Win32_Tpm" of wmis "root\CIMv2\Security\MicrosoftTpm") and (boolean value of selects "IsOwned_InitialValue from Win32_Tpm" of wmis "root\CIMv2\Security\MicrosoftTpm") /* TPM Active, Owned, and Enabled */</Relevance>
		<Relevance><![CDATA[if(exists WMI "root\CIMv2\Security\MicrosoftVolumeEncryption") then (number of select objects ("* from win32_EncryptableVolume")of WMI "root\CIMv2\Security\MicrosoftVolumeEncryption" >= 1) else (false) /* There is a drive to encrypt... This should probable be made more specific*/]]></Relevance>
		<Relevance><![CDATA[exists selects ("* from win32_EncryptableVolume where (DriveLetter LIKE '_:' and DriveLetter!='" & name of drive of system folder & "')")of WMI "root\CIMv2\Security\MicrosoftVolumeEncryption" /* There are encryptable non system drives with drive letters attached */]]></Relevance>
		<Relevance><![CDATA[integer value of selects ("ProtectionStatus from win32_EncryptableVolume where (DriveLetter LIKE '_:' and DriveLetter!='" & name of drive of system folder & "')") of WMI "root\CIMv2\Security\MicrosoftVolumeEncryption" = 0 /* There are encryptable non-system drives with drive letters that are not currently encrypted */]]></Relevance>
		<Relevance><![CDATA[uptime of operating system > 10*minute /* Bitlocker status doesn't change immediately after first reboot */]]></Relevance>
		<Category>Disk Encryption</Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-04-29</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to encrypt the specified drive using the TPM and a random recovery password.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action parameter query "Volume" with description "Volume to encrypt. Example C: or D:"

action uses wow64 redirection {not x64 of operating system}

//
// Configure Storage and Instance Paths
//

parameter "Storage"="{pathname of folder "__Global" of data folder of client}\Bitlocker"
parameter "Instance"="{(now - "01 Jan 1970 00:00:00" as local time) / (1 * second)}"
parameter "InstanceStorage"="{parameter "Storage"}\{parameter "Instance"}"

folder create "{parameter "Storage"}"
folder create "{parameter "Storage"}\{parameter "Instance"}"

//
// Configure Upload Manager
//

setting "_BESClient_ArchiveManager_MaxArchiveSize"="2097152" on "{now}" for client 
setting "_BESClient_ArchiveManager_OperatingMode"="2" on "{now}" for client 
setting "_BESClient_ArchiveManager_FileSet-BITLOCKER{parameter "Instance"}"="{parameter "InstanceStorage"}\*.*" on "{now}" for client 

//
// Cleanup before writing scripts
//
delete __createfile
delete enable.bat
delete terminate.bat
delete addrecoverykey.bat
delete status.bat

//
// Write Scripts
//

createfile until _end_
manage-bde -status {parameter "Volume" of action} > "{parameter "InstanceStorage"}\Status.log"
_end_

move __createfile status.bat

createfile until _end_
manage-bde -on {parameter "Volume" of action} > "{parameter "InstanceStorage"}\Enable.log"
_end_

move __createfile enable.bat

createfile until _end_
manage-bde -off {parameter "Volume" of action} > "{parameter "InstanceStorage"}\Terminate.log
manage-bde -protectors {parameter "Volume" of action} -delete -type -recoverypassword >> "{parameter "InstanceStorage"}\Terminate.log
_end_

move __createfile terminate.bat

createfile until _end_
manage-bde -protectors -add {parameter "Volume" of action} -recoverypassword > "{parameter "InstanceStorage"}\AddRecoveryKey.log
_end_

move __createfile addrecoverykey.bat

//
// Get BitLocker Status
//

wait status.bat

if {((not exists lines containing "Encryption in Progress" of it) and (not exists lines containing "NOTE: Encryption will begin after the hardware test succeeds." of it)) of file "Status.log" of folder (parameter "InstanceStorage") }
	
	// DO NOT CONTINUE IF THERE IS AN EXISTING UPLOAD IN PROGRESS
	continue if {not exists setting "_BESClient_UploadManager_Progress" of client}

	wait enable.bat

	// No existing recovery key -- add one
	if { not exists lines containing "Numerical Password" of file "Status.log" of folder (parameter "InstanceStorage")} 
		wait addrecoverykey.bat
	endif 

	// If the action dies here there is a bootable CD or DVD in the drive
	if { exists lines containing "ERROR: BitLocker detected a bootable CD or DVD on the computer." of file "Enable.log" of folder (parameter "InstanceStorage")} 
		// BitLocker is in inconsistent state -- kill encryption
		wait terminate.bat
		archive now
		exit 20
	endif
	
	// If the action dies here there was another error
	if { exists lines containing "ERROR" of file "Enable.log" of folder (parameter "InstanceStorage")} 
		// BitLocker is in inconsistent state -- kill encryption
		wait terminate.bat
		archive now
		exit 10
	endif
	
	archive now

	action requires restart

else

	archive now

	action requires restart

endif]]></ActionScript>
		</DefaultAction>
		<Action ID="Action2">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to encrypt the specified drive using just the TPM.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[action parameter query "Volume" with description "Volume to encrypt. Example C: or D:"

action uses wow64 redirection {not x64 of operating system}

//
// Configure Storage and Instance Paths
//

parameter "Storage"="{pathname of folder "__Global" of data folder of client}\Bitlocker"
parameter "Instance"="{(now - "01 Jan 1970 00:00:00" as local time) / (1 * second)}"
parameter "InstanceStorage"="{parameter "Storage"}\{parameter "Instance"}"

folder create "{parameter "Storage"}"
folder create "{parameter "Storage"}\{parameter "Instance"}"

//
// Configure Upload Manager
//

setting "_BESClient_ArchiveManager_MaxArchiveSize"="2097152" on "{now}" for client 
setting "_BESClient_ArchiveManager_OperatingMode"="2" on "{now}" for client 
setting "_BESClient_ArchiveManager_FileSet-BITLOCKER{parameter "Instance"}"="{parameter "InstanceStorage"}\*.*" on "{now}" for client 

//
// Cleanup before writing scripts
//
delete __createfile
delete enable.bat
delete terminate.bat
delete addrecoverykey.bat
delete status.bat

//
// Write Scripts
//

createfile until _end_
manage-bde -status {parameter "Volume" of action} > "{parameter "InstanceStorage"}\Status.log"
_end_

move __createfile status.bat

createfile until _end_
manage-bde -on {parameter "Volume" of action} > "{parameter "InstanceStorage"}\Enable.log"
_end_

move __createfile enable.bat

createfile until _end_
manage-bde -off {parameter "Volume" of action} > "{parameter "InstanceStorage"}\Terminate.log
manage-bde -protectors {parameter "Volume" of action} -delete -type -recoverypassword >> "{parameter "InstanceStorage"}\Terminate.log
_end_

move __createfile terminate.bat

createfile until _end_
manage-bde -protectors -add {parameter "Volume" of action} -recoverypassword > "{parameter "InstanceStorage"}\AddRecoveryKey.log
_end_

move __createfile addrecoverykey.bat

//
// Get BitLocker Status
//

wait status.bat

if {((not exists lines containing "Encryption in Progress" of it) and (not exists lines containing "NOTE: Encryption will begin after the hardware test succeeds." of it)) of file "Status.log" of folder (parameter "InstanceStorage") }
	
	// DO NOT CONTINUE IF THERE IS AN EXISTING UPLOAD IN PROGRESS
	continue if {not exists setting "_BESClient_UploadManager_Progress" of client}

	wait enable.bat

	// If the action dies here there is a bootable CD or DVD in the drive
	if { exists lines containing "ERROR: BitLocker detected a bootable CD or DVD on the computer." of file "Enable.log" of folder (parameter "InstanceStorage")} 
		// BitLocker is in inconsistent state -- kill encryption
		wait terminate.bat
		archive now
		exit 20
	endif
	
	// If the action dies here there was another error
	if { exists lines containing "ERROR" of file "Enable.log" of folder (parameter "InstanceStorage")} 
		// BitLocker is in inconsistent state -- kill encryption
		wait terminate.bat
		archive now
		exit 10
	endif
	
	archive now

	action requires restart

else

	archive now

	action requires restart

endif]]></ActionScript>
		</Action>
	</Fixlet>
</BES>
