<?xml version="1.0" encoding="UTF-8"?>

<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Bitlocker Recovery Password Probe - Windows</Title>
		<Description><![CDATA[<DIV class=subsection>This probe grabs the current bitlocker recovery password for the system in it's raw format and outputs it to disk to be gathered by analyses. 
<P>Creates a Volume-RecoveryPwd.txt file in __BESData. If there is already a file it checks to see if the recovery key has changed. If it has changed it archives the old one and writes the new recovery key to disk</P>
<P>Example</P>
<UL>
<LI>C-RecoveryPwd.txt 
<LI>D-RecoveryPwd.txt</LI></UL>
<P>Information on using this content is available here: <A href="https://github.com/strawgate/C3-Protect/wiki/Bitlocker">https://github.com/strawgate/C3-Protect/wiki/Bitlocker</A></P></DIV>]]></Description>
		<Relevance>windows of operating system</Relevance>
		<Relevance><![CDATA[(windows of operating system) AND (version of operating system >= "6.0") AND (( exists product info string whose(it ends with "Enterprise" OR it starts with "Enterprise" OR it ends with "Ultimate" OR it ends with "Server Datacenter") of operating system ) OR ( (version of operating system >= "6.2") AND (exists product info string whose(it ends with "Business") of operating system) ))]]></Relevance>
		<Relevance>exists boolean values whose (it = true) of selects ("IsVolumeInitializedForProtection from win32_EncryptableVolume") of WMI "root\CIMv2\Security\MicrosoftVolumeEncryption"</Relevance>
		<Category>Disk Encryption</Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-04-29</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[//Script will not capture bitlocker recovery password with wow64 redirection enabled
action uses wow64 redirection {not x64 of operating system}

parameter "PowerShellExe"="{ pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) }"

parameter "Storage"="{pathname of folder "__Global" of data folder of client}\Bitlocker"

folder create "{parameter "Storage"}"

delete __createfile
delete powershell.ps1

createfile until _end_
param (
    $OutFolder = "."
)

#Regex for extracting the volume letters from the BitLocker Status
[regex] $VolumeRegex = "Volume ([a-zA-Z]:)"
[regex] $RecoveryPwdRegex = "Password: \s`r`n([0-9-]*)"

#Get Bitlocker Status: Windows 7+
$BitlockerStatus = (manage-bde -status)

#Extract Volume Letters from Bitlocker Status
$Volumes = $VolumeRegex.Matches($BitlockerStatus) | foreach-object {{$_.groups[1].value}

#Get Recovery Passwords
foreach ($Volume in $Volumes) {{
    $ProtectorInfo = manage-bde -protectors -get $Volume -t RecoveryPassword

    #Check protector for numerical password
    $PasswordSection = $ProtectorInfo | select-string -Pattern "\s+\sPassword:"

    #Skip protectors that don't contain a numerical password
    if ($PasswordSection -eq $null) {{write-verbose "The protector $($ProtectorInfo[6]) for volume $Volume does not have a recovery password"; continue;}

    #Get the line number for the password
    $PwdIndex = $PasswordSection | select-object LineNumber

    #Grab the recovery key and trim spaces
    $RecoveryPwd = $ProtectorInfo[$PwdIndex.LineNumber].trim()

    #Determine Storage Path for recovery key:
    $KeyStoragePath = "$OutFolder\$($Volume[0])-RecoveryPwd.txt"

    #Check for previous recovery key
    if (test-path $KeyStoragePath){{
        $OldKey = get-content $KeyStoragePath
        if ($OldKey -eq $RecoveryPwd) {{ #New Key is the same, move on
            write-verbose "Recovery Key is already recorded. Moving on."
            continue;
        } else {{ #New Key is Different -- move old key
            write-verbose "Recovery Key is different than previously recorded. Archiving old key and recording new key."
            rename-item $KeyStoragePath "$($Volume[0])-RecoveryPwd-$(get-date -f "yyyyMMddHHmmss").txt"
        }
    }

    #If asked to, store the recovery key
    if ($OutFolder -ne $null) {{"$RecoveryPwd" > "$OutFolder\$($Volume[0])-RecoveryPwd.txt"}
}
_end_

move __createfile powershell.ps1

waithidden "{parameter "PowershellExe"}" -ExecutionPolicy Bypass -File powershell.ps1 -OutFolder "{parameter "Storage"}"]]></ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
