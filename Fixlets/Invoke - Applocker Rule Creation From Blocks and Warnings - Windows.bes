<?xml version="1.0" encoding="UTF-8"?>

<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>Invoke - Applocker Rule Creation From Blocks and Warnings - Windows</Title>
		<Description><![CDATA[<P>Creates BigFix Fixlets for denied or audited Applocker events on the target system.</P>
<P>Fixlets are placed in the BES Client Directory under __BESData\__Global\ApplockerGeneratedRules</P>
<P>Information on using this content is available here: <A href="https://github.com/strawgate/C3-Protect/wiki/Applocker">https://github.com/strawgate/C3-Protect/wiki/Applocker</A>&nbsp;</P>
<P>For general information or to report issues with C3 Protect content please visit GitHub here: <A href="https://github.com/strawgate/C3-Protect">https://github.com/strawgate/C3-Protect</A></P>]]></Description>
		<Relevance>windows of operating system</Relevance>
		<Category></Category>
		<Source>Internal</Source>
		<SourceID></SourceID>
		<SourceReleaseDate>2016-05-28</SourceReleaseDate>
		<SourceSeverity></SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">// Enter your action script here
action uses wow64 redirection {not x64 of operating system}

parameter "PowerShellExe"="{ pathname of file ((it as string) of value "Path" of key "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" of native registry) }"
parameter "Storage"="{pathname of data folder of client}\__Global\ApplockerGeneratedRules"

createfile until __end__
Function Remove-InvalidFileNameChars {{
&lt;#
.SYNOPSIS
Removes characters considered invalid by the Windows Operating System for file names.

.DESCRIPTION
Takes a string over the pipline or as a parameter and removes invalid characters from the file name.
This sanitization allows you safely take the name you have passed and use it to save a file to disk.

.PARAMETER Name 
A string you wish to escape
#&gt;
  param(
    [Parameter(Mandatory=$true,
      Position=0,
      ValueFromPipeline=$true,
      ValueFromPipelineByPropertyName=$true)]
    [String]$Name
  )

  $invalidChars = [IO.Path]::GetInvalidFileNameChars() -join ''
  $re = "[{{0}%]" -f [RegEx]::Escape($invalidChars)
  return ($Name -replace $re)
}

Function Merge-AppLockerPolicy {{
    Param (
        $Policies
    )
    $ExeMethod = ""
    $MsiMethod = ""
    $ScriptMethod = ""
    $AppxMethod = ""

    $ExeRules = ""
    $MsiRules = ""
    $ScriptRules = ""
    $AppXRules = ""

    foreach ($Policy in $Policies) {{
        $xml = select-xml -Path $Ruleset.fullname -XPath "/AppLockerPolicy/RuleCollection"
    
        foreach ($Collection in $XML) {{
        
            if ($Collection.Node.Type -eq "Exe") {{
                if ($Collection.Node.InnerXml.trim()) {{$ExeRules += $Collection.Node.InnerXml.tostring()}
                if ($Collection.Node.EnforcementMode -eq "AuditOnly" -and $ExeMethod -ne "Enabled") {{ $ExeMethod = 'EnforcementMode="AuditOnly"' }
                if ($Collection.Node.EnforcementMode -eq "Enabled") {{ $ExeMethod = 'EnforcementMode="Enabled"' }
            }

            if ($Collection.Node.Type -eq "Script") {{
                if ($Collection.Node.InnerXml.trim()) {{$ScriptRules += $Collection.Node.InnerXml.tostring()}
                if ($Collection.Node.EnforcementMode -eq "AuditOnly" -and $ScriptMethod -ne "Enabled") {{ $ScriptMethod = 'EnforcementMode="AuditOnly"' }
                if ($Collection.Node.EnforcementMode -eq "Enabled") {{ $ScriptMethod = 'EnforcementMode="Enabled"' }
            }

            if ($Collection.Node.Type -eq "Msi") {{
                if ($Collection.Node.InnerXml.trim()) {{$MsiRules += $Collection.Node.InnerXml.tostring()}
                if ($Collection.Node.EnforcementMode -eq "AuditOnly" -and $MsiMethod -ne "Enabled") {{ $MsiMethod = 'EnforcementMode="AuditOnly"' }
                if ($Collection.Node.EnforcementMode -eq "Enabled") {{ $MsiMethod = 'EnforcementMode="Enabled"' }
            }

            if ($Collection.Node.Type -eq "AppX") {{
                if ($Collection.Node.InnerXml.trim()) {{$AppXRules += $Xml.Node.InnerXml.tostring()}
                if ($Collection.Node.EnforcementMode -eq "AuditOnly" -and $AppXMethod -ne "Enabled") {{ $AppXMethod = 'EnforcementMode="AuditOnly"' }
                if ($Collection.Node.EnforcementMode -eq "Enabled") {{ $AppXMethod = 'EnforcementMode="Enabled"' }
            }
 
        }
    }

    $Policy = @"
&lt;AppLockerPolicy Version="1"&gt;
    &lt;RuleCollection Type="Exe" $ExeMethod&gt;
        $ExeRules
    &lt;/RuleCollection&gt;
    &lt;RuleCollection Type="Msi" $MsiMethod&gt;
        $MsiRules
    &lt;/RuleCollection&gt;
    &lt;RuleCollection Type="Script" $ScriptMethod&gt;
        $ScriptRules
    &lt;/RuleCollection&gt;
    &lt;RuleCollection Type="Appx" $AppxMethod&gt;
        $AppxRules
    &lt;/RuleCollection&gt;
&lt;/AppLockerPolicy&gt;
"@
    return $Policy
}

Function New-ApplockerFixlet {{
    Param (
        $Type,
        $Name,
        $XML
    )

$Fixlet = @"
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd"&gt;
	&lt;Fixlet&gt;
		&lt;Title&gt;Config - Cache Applocker Rules - $Type, $Name - Windows&lt;/Title&gt;
		&lt;Description&gt;&lt;![CDATA[&lt;P&gt;This policy adds a policy to Applocker. Specifically it provides a rule for $Type&lt;/P&gt;&lt;br&gt;The rule self describes as: $Name]]&gt;&lt;/Description&gt;
		&lt;Relevance&gt;Windows of Operating System&lt;/Relevance&gt;
		&lt;Relevance&gt;&lt;![CDATA[(not exists file (pathname of data folder of client &amp; "\__Global\Applocker\$(Remove-InvalidFileNameChars "$Type-$Name").xml"))]]&gt;&lt;/Relevance&gt;
		&lt;Category&gt;Application Whitelisting&lt;/Category&gt;
		&lt;Source&gt;Internal&lt;/Source&gt;
		&lt;SourceID&gt;&lt;/SourceID&gt;
		&lt;SourceReleaseDate&gt;2016-05-10&lt;/SourceReleaseDate&gt;
		&lt;SourceSeverity&gt;&lt;/SourceSeverity&gt;
		&lt;CVENames&gt;&lt;/CVENames&gt;
		&lt;SANSID&gt;&lt;/SANSID&gt;
		&lt;MIMEField&gt;
			&lt;Name&gt;x-fixlet-modification-time&lt;/Name&gt;
			&lt;Value&gt;Tue, 17 May 2016 21:39:44 +0000&lt;/Value&gt;
		&lt;/MIMEField&gt;
		&lt;Domain&gt;BESC&lt;/Domain&gt;
		&lt;DefaultAction ID="Action1"&gt;
			&lt;Description&gt;
				&lt;PreLink&gt;Click &lt;/PreLink&gt;
				&lt;Link&gt;here&lt;/Link&gt;
				&lt;PostLink&gt; to deploy this action.&lt;/PostLink&gt;
			&lt;/Description&gt;
			&lt;ActionScript MIMEType="application/x-Fixlet-Windows-Shell"&gt;&lt;![CDATA[action uses wow64 redirection {{not x64 of operating system}

parameter "RuleName"="$(Remove-InvalidFileNameChars "$Type-$Name")"
parameter "Storage"="{{pathname of data folder of client}\__Global\Applocker"

delete __createfile

createfile until _end_
&lt;AppLockerPolicy Version="1"&gt;
&lt;RuleCollection Type="$Type"&gt;
$($XML)
&lt;/RuleCollection&gt;
&lt;/AppLockerPolicy&gt;
_end_

folder create "{{parameter "Storage"}"

delete "{{parameter "Storage"}\{{parameter "RuleName"}.xml"
move __createfile "{{parameter "Storage"}\{{parameter "RuleName"}.xml"

]]&gt;&lt;/ActionScript&gt;
		&lt;/DefaultAction&gt;
	&lt;/Fixlet&gt;
&lt;/BES&gt;
"@
    return $Fixlet
}
__end__

delete Applocker.psm1
move __createfile Applocker.psm1

createfile until __end__
param (
    $OutDir = ".\Output"
)

import-module applocker
import-module ".\Applocker.psm1" -force

$Policy = Get-AppLockerFileInformation -EventLog -LogPath "Microsoft-Windows-AppLocker/EXE and DLL" -EventType Denied, Audited  | New-AppLockerPolicy -RuleType Publisher, Hash, Path -User Everyone -Optimize

foreach ($CollectionType in $Policy.RuleCollectionTypes){{
    foreach($Rule in $Policy.GetRuleCollection($CollectionType)) {{
        $Action = $Rule.Action
        $Name = $Rule.Name
        $Type = $CollectionType
        $ID = $Rule.ID

        $Fixlet = New-AppLockerFixlet -Name $Name -Type $Type -Xml $Rule.ToXML()

        $Fixlet &gt; "$OutDir\$(Remove-InvalidFileNameChars "$Type-$Name.bes")"
    }
}

$Policy = Get-AppLockerFileInformation -EventLog -LogPath "Microsoft-Windows-AppLocker/Msi and Script" -EventType Denied, Audited  | New-AppLockerPolicy -RuleType Publisher, Hash, Path -User Everyone -Optimize

foreach ($CollectionType in $Policy.RuleCollectionTypes){{
    foreach($Rule in $Policy.GetRuleCollection($CollectionType)) {{
        $Action = $Rule.Action
        $Name = $Rule.Name
        $Type = $CollectionType
        $ID = $Rule.ID

        $Fixlet = New-AppLockerFixlet -Name $Name -Type $Type -Xml $Rule.ToXML()

        $Fixlet &gt; "$OutDir\$(Remove-InvalidFileNameChars "$Type-$Name.bes")"
    }
}
__end__

delete GenerateRules.ps1
move __createfile GenerateRules.ps1

folder create "{parameter "Storage"}"

//
// Configure Upload Manager
//

setting "_BESClient_ArchiveManager_MaxArchiveSize"="2097152" on "{parameter "action issue date" of action}" for client 
setting "_BESClient_ArchiveManager_OperatingMode"="2" on "{parameter "action issue date" of action}" for client 
setting "_BESClient_ArchiveManager_FileSet-APPLOCKER"="{parameter "Storage"}\*.*" on "{parameter "action issue date" of action}" for client 

waithidden "{parameter "PowershellExe"}" -ExecutionPolicy Bypass -File GenerateRules.ps1 -OutDir "{parameter "Storage"}"

archive now
</ActionScript>
			<SuccessCriteria Option="RunToCompletion"></SuccessCriteria>
		</DefaultAction>
	</Fixlet>
</BES>
